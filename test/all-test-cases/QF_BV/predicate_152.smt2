(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |
Generated by: Alexey Vishnyakov, Andrey Fedotov, Daniil Kuts, Alexander Novikov, Darya Parygina, Eli Kobrin, Vlada Logunova, Pavel Belecky, Shamil Kurmangaleev
Generated on: 2021-02-19
Generator: Sydr: Cutting Edge Dynamic Symbolic Execution https://arxiv.org/abs/2011.09269
           Triton framework inside https://triton.quarkslab.com/
Application: Dynamic symbolic execution
Target solver: Yices 2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun file_elf_input_32 () (_ BitVec 8))
(declare-fun file_elf_input_33 () (_ BitVec 8))
(declare-fun file_elf_input_34 () (_ BitVec 8))
(declare-fun file_elf_input_35 () (_ BitVec 8))
(declare-fun file_elf_input_36 () (_ BitVec 8))
(declare-fun file_elf_input_37 () (_ BitVec 8))
(declare-fun file_elf_input_38 () (_ BitVec 8))
(declare-fun file_elf_input_39 () (_ BitVec 8))
(define-fun ref!4190 () (_ BitVec 8) file_elf_input_32) ; Byte reference
(define-fun ref!4191 () (_ BitVec 8) file_elf_input_33) ; Byte reference
(define-fun ref!4192 () (_ BitVec 8) file_elf_input_34) ; Byte reference
(define-fun ref!4193 () (_ BitVec 8) file_elf_input_35) ; Byte reference
(define-fun ref!4194 () (_ BitVec 8) file_elf_input_36) ; Byte reference
(define-fun ref!4195 () (_ BitVec 8) file_elf_input_37) ; Byte reference
(define-fun ref!4196 () (_ BitVec 8) file_elf_input_38) ; Byte reference
(define-fun ref!4197 () (_ BitVec 8) file_elf_input_39) ; Byte reference
(define-fun ref!8386 () (_ BitVec 8) ref!4197) ; Byte reference - MOV operation - 0x7fe08dcd65d8: mov qword ptr [rdi + 0x10], r9
(define-fun ref!8387 () (_ BitVec 8) ref!4196) ; Byte reference - MOV operation - 0x7fe08dcd65d8: mov qword ptr [rdi + 0x10], r9
(define-fun ref!8388 () (_ BitVec 8) ref!4195) ; Byte reference - MOV operation - 0x7fe08dcd65d8: mov qword ptr [rdi + 0x10], r9
(define-fun ref!8389 () (_ BitVec 8) ref!4194) ; Byte reference - MOV operation - 0x7fe08dcd65d8: mov qword ptr [rdi + 0x10], r9
(define-fun ref!8390 () (_ BitVec 8) ref!4193) ; Byte reference - MOV operation - 0x7fe08dcd65d8: mov qword ptr [rdi + 0x10], r9
(define-fun ref!8391 () (_ BitVec 8) ref!4192) ; Byte reference - MOV operation - 0x7fe08dcd65d8: mov qword ptr [rdi + 0x10], r9
(define-fun ref!8392 () (_ BitVec 8) ref!4191) ; Byte reference - MOV operation - 0x7fe08dcd65d8: mov qword ptr [rdi + 0x10], r9
(define-fun ref!8393 () (_ BitVec 8) ref!4190) ; Byte reference - MOV operation - 0x7fe08dcd65d8: mov qword ptr [rdi + 0x10], r9
(define-fun ref!8489 () (_ BitVec 8) ref!8386) ; Byte reference - MOV operation - 0x7fe08ad929fa: mov qword ptr [rbx + 0x30], rax
(define-fun ref!8490 () (_ BitVec 8) ref!8387) ; Byte reference - MOV operation - 0x7fe08ad929fa: mov qword ptr [rbx + 0x30], rax
(define-fun ref!8491 () (_ BitVec 8) ref!8388) ; Byte reference - MOV operation - 0x7fe08ad929fa: mov qword ptr [rbx + 0x30], rax
(define-fun ref!8492 () (_ BitVec 8) ref!8389) ; Byte reference - MOV operation - 0x7fe08ad929fa: mov qword ptr [rbx + 0x30], rax
(define-fun ref!8493 () (_ BitVec 8) ref!8390) ; Byte reference - MOV operation - 0x7fe08ad929fa: mov qword ptr [rbx + 0x30], rax
(define-fun ref!8494 () (_ BitVec 8) ref!8391) ; Byte reference - MOV operation - 0x7fe08ad929fa: mov qword ptr [rbx + 0x30], rax
(define-fun ref!8495 () (_ BitVec 8) ref!8392) ; Byte reference - MOV operation - 0x7fe08ad929fa: mov qword ptr [rbx + 0x30], rax
(define-fun ref!8496 () (_ BitVec 8) ref!8393) ; Byte reference - MOV operation - 0x7fe08ad929fa: mov qword ptr [rbx + 0x30], rax
(define-fun ref!19153 () (_ BitVec 8) ref!8489) ; Byte reference - MOV operation - 0x7fe08dd589b3: mov qword ptr [rsp + 0x30], rdx
(define-fun ref!19154 () (_ BitVec 8) ref!8490) ; Byte reference - MOV operation - 0x7fe08dd589b3: mov qword ptr [rsp + 0x30], rdx
(define-fun ref!19155 () (_ BitVec 8) ref!8491) ; Byte reference - MOV operation - 0x7fe08dd589b3: mov qword ptr [rsp + 0x30], rdx
(define-fun ref!19156 () (_ BitVec 8) ref!8492) ; Byte reference - MOV operation - 0x7fe08dd589b3: mov qword ptr [rsp + 0x30], rdx
(define-fun ref!19157 () (_ BitVec 8) ref!8493) ; Byte reference - MOV operation - 0x7fe08dd589b3: mov qword ptr [rsp + 0x30], rdx
(define-fun ref!19158 () (_ BitVec 8) ref!8494) ; Byte reference - MOV operation - 0x7fe08dd589b3: mov qword ptr [rsp + 0x30], rdx
(define-fun ref!19159 () (_ BitVec 8) ref!8495) ; Byte reference - MOV operation - 0x7fe08dd589b3: mov qword ptr [rsp + 0x30], rdx
(define-fun ref!19160 () (_ BitVec 8) ref!8496) ; Byte reference - MOV operation - 0x7fe08dd589b3: mov qword ptr [rsp + 0x30], rdx
(define-fun ref!19167 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!19153 ref!19154) ref!19155) ref!19156) ref!19157) ref!19158) ref!19159) ref!19160)) ; MOV operation - 0x7fe08dc8fb7f: mov rax, qword ptr [rax]
(define-fun ref!19178 () (_ BitVec 64) (bvand ref!19167 ref!19167)) ; TEST operation - 0x7fe08dc8fb89: test rax, rax
(define-fun ref!19182 () (_ BitVec 1) ((_ extract 63 63) ref!19178)) ; Sign flag - 0x7fe08dc8fb89: test rax, rax
(define-fun ref!19196 () (_ BitVec 8) ref!19153) ; Byte reference - MOV operation - 0x7fe08dc8fb99: mov qword ptr [rbp - 0x520], rax
(define-fun ref!19197 () (_ BitVec 8) ref!19154) ; Byte reference - MOV operation - 0x7fe08dc8fb99: mov qword ptr [rbp - 0x520], rax
(define-fun ref!19198 () (_ BitVec 8) ref!19155) ; Byte reference - MOV operation - 0x7fe08dc8fb99: mov qword ptr [rbp - 0x520], rax
(define-fun ref!19199 () (_ BitVec 8) ref!19156) ; Byte reference - MOV operation - 0x7fe08dc8fb99: mov qword ptr [rbp - 0x520], rax
(define-fun ref!19200 () (_ BitVec 8) ref!19157) ; Byte reference - MOV operation - 0x7fe08dc8fb99: mov qword ptr [rbp - 0x520], rax
(define-fun ref!19201 () (_ BitVec 8) ref!19158) ; Byte reference - MOV operation - 0x7fe08dc8fb99: mov qword ptr [rbp - 0x520], rax
(define-fun ref!19202 () (_ BitVec 8) ref!19159) ; Byte reference - MOV operation - 0x7fe08dc8fb99: mov qword ptr [rbp - 0x520], rax
(define-fun ref!19203 () (_ BitVec 8) ref!19160) ; Byte reference - MOV operation - 0x7fe08dc8fb99: mov qword ptr [rbp - 0x520], rax
(define-fun ref!19218 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!19196 ref!19197) ref!19198) ref!19199) ref!19200) ref!19201) ref!19202) ref!19203)) ; MOV operation - 0x7fe08dc90116: mov rdi, qword ptr [rbp - 0x520]
(define-fun ref!19220 () (_ BitVec 64) ref!19218) ; MOV operation - 0x7fe08dc8c760: mov rax, rdi
(define-fun ref!19223 () (_ BitVec 64) ((_ extract 127 64) (bvmul ((_ zero_extend 64) ref!19220) ((_ zero_extend 64) (_ bv14757395258967641293 64))))) ; MUL operation - 0x7fe08dc8c767: mul rcx
(define-fun ref!19227 () (_ BitVec 64) (bvlshr ref!19223 (bvand ((_ zero_extend 56) (_ bv3 8)) (_ bv63 64)))) ; SHR operation - 0x7fe08dc8c76a: shr rdx, 3
(define-fun ref!19234 () (_ BitVec 64) (bvadd ref!19227 (bvmul ref!19227 (_ bv4 64)))) ; LEA operation - 0x7fe08dc8c76e: lea rax, [rdx + rdx*4]
(define-fun ref!19236 () (_ BitVec 64) (bvadd ref!19234 ref!19234)) ; ADD operation - 0x7fe08dc8c772: add rax, rax
(define-fun ref!19244 () (_ BitVec 64) (bvsub ref!19218 ref!19236)) ; SUB operation - 0x7fe08dc8c775: sub rdi, rax
(define-fun ref!19252 () (_ BitVec 64) (bvand ref!19227 ref!19227)) ; TEST operation - 0x7fe08dc8c778: test rdx, rdx
(define-fun ref!19257 () (_ BitVec 1) (ite (= ref!19252 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7fe08dc8c778: test rdx, rdx
(define-fun ref!19263 () (_ BitVec 64) ref!19227) ; MOV operation - 0x7fe08dc8c780: mov rdi, rdx
(define-fun ref!19268 () (_ BitVec 64) ref!19263) ; MOV operation - 0x7fe08dc8c760: mov rax, rdi
(define-fun ref!19279 () (_ BitVec 64) ((_ extract 127 64) (bvmul ((_ zero_extend 64) ref!19268) ((_ zero_extend 64) (_ bv14757395258967641293 64))))) ; MUL operation - 0x7fe08dc8c767: mul rcx
(define-fun ref!19283 () (_ BitVec 64) (bvlshr ref!19279 (bvand ((_ zero_extend 56) (_ bv3 8)) (_ bv63 64)))) ; SHR operation - 0x7fe08dc8c76a: shr rdx, 3
(define-fun ref!19290 () (_ BitVec 64) (bvadd ref!19283 (bvmul ref!19283 (_ bv4 64)))) ; LEA operation - 0x7fe08dc8c76e: lea rax, [rdx + rdx*4]
(define-fun ref!19292 () (_ BitVec 64) (bvadd ref!19290 ref!19290)) ; ADD operation - 0x7fe08dc8c772: add rax, rax
(define-fun ref!19300 () (_ BitVec 64) (bvsub ref!19263 ref!19292)) ; SUB operation - 0x7fe08dc8c775: sub rdi, rax
(define-fun ref!19308 () (_ BitVec 64) (bvand ref!19283 ref!19283)) ; TEST operation - 0x7fe08dc8c778: test rdx, rdx
(define-fun ref!19313 () (_ BitVec 1) (ite (= ref!19308 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7fe08dc8c778: test rdx, rdx
(assert (not (= ref!19182 (_ bv1 1))))
(assert (bvuge (bvadd (_ bv140602429439808 64) ref!19244) (_ bv140602429439808 64)))
(assert (bvule (bvadd (_ bv140602429439808 64) ref!19244) (_ bv140602429439907 64)))
(assert (= ref!19257 (_ bv0 1)))
(assert (bvuge (bvadd (_ bv140602429439808 64) ref!19300) (_ bv140602429439808 64)))
(assert (bvule (bvadd (_ bv140602429439808 64) ref!19300) (_ bv140602429439907 64)))
(assert (= ref!19313 (_ bv0 1)))
(minimize file_elf_input_32 )
(check-sat)
(get-objectives)
(exit)
