(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |
Generated by: Alexey Vishnyakov, Andrey Fedotov, Daniil Kuts, Alexander Novikov, Darya Parygina, Eli Kobrin, Vlada Logunova, Pavel Belecky, Shamil Kurmangaleev
Generated on: 2021-02-19
Generator: Sydr: Cutting Edge Dynamic Symbolic Execution https://arxiv.org/abs/2011.09269
           Triton framework inside https://triton.quarkslab.com/
Application: Dynamic symbolic execution
Target solver: Yices 2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun file_file.pgm_16 () (_ BitVec 8))
(declare-fun file_file.pgm_17 () (_ BitVec 8))
(declare-fun file_file.pgm_18 () (_ BitVec 8))
(declare-fun file_file.pgm_20 () (_ BitVec 8))
(declare-fun file_file.pgm_21 () (_ BitVec 8))
(declare-fun file_file.pgm_22 () (_ BitVec 8))
(define-fun ref!16 () (_ BitVec 8) file_file.pgm_16) ; Byte reference
(define-fun ref!17 () (_ BitVec 8) file_file.pgm_17) ; Byte reference
(define-fun ref!18 () (_ BitVec 8) file_file.pgm_18) ; Byte reference
(define-fun ref!20 () (_ BitVec 8) file_file.pgm_20) ; Byte reference
(define-fun ref!21 () (_ BitVec 8) file_file.pgm_21) ; Byte reference
(define-fun ref!22 () (_ BitVec 8) file_file.pgm_22) ; Byte reference
(define-fun ref!8690 () (_ BitVec 32) ((_ zero_extend 24) ref!16)) ; Extended part - MOVZX operation - 0x7f10b260ad7a: movzx eax, byte ptr [rax]
(define-fun ref!8693 () (_ BitVec 32) (bvsub ref!8690 (_ bv35 32))) ; CMP operation - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!8699 () (_ BitVec 1) (ite (= ref!8693 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!8705 () (_ BitVec 32) (bvsub ref!8690 (_ bv4294967295 32))) ; CMP operation - 0x7f10b260af2f: cmp eax, -1
(define-fun ref!8711 () (_ BitVec 1) (ite (= ref!8705 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260af2f: cmp eax, -1
(define-fun ref!8726 () (_ BitVec 64) ((_ sign_extend 32) ref!8690)) ; MOVSXD operation - 0x7f10b260af18: movsxd rax, ebx
(define-fun ref!8732 () (_ BitVec 32) (bvsub ref!8690 (_ bv45 32))) ; CMP operation - 0x7f10b260af50: cmp ebx, 0x2d
(define-fun ref!8738 () (_ BitVec 1) (ite (= ref!8732 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260af50: cmp ebx, 0x2d
(define-fun ref!8741 () (_ BitVec 32) (bvsub ref!8690 (_ bv43 32))) ; CMP operation - 0x7f10b260af55: cmp ebx, 0x2b
(define-fun ref!8747 () (_ BitVec 1) (ite (= ref!8741 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260af55: cmp ebx, 0x2b
(define-fun ref!8758 () (_ BitVec 64) (bvadd (_ bv18446744073709551568 64) ref!8726)) ; LEA operation - 0x7f10b260af77: lea r15, [rax + rdx*2 - 0x30]
(define-fun ref!8775 () (_ BitVec 32) ((_ zero_extend 24) ref!17)) ; Extended part - MOVZX operation - 0x7f10b260ad7a: movzx eax, byte ptr [rax]
(define-fun ref!8778 () (_ BitVec 32) (bvsub ref!8775 (_ bv35 32))) ; CMP operation - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!8784 () (_ BitVec 1) (ite (= ref!8778 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!8790 () (_ BitVec 32) (bvand ref!8775 ref!8775)) ; TEST operation - 0x7f10b260af81: test eax, eax
(define-fun ref!8794 () (_ BitVec 1) ((_ extract 31 31) ref!8790)) ; Sign flag - 0x7f10b260af81: test eax, eax
(define-fun ref!8798 () (_ BitVec 64) ((_ sign_extend 32) ref!8775)) ; CDQE operation - 0x7f10b260af88: cdqe
(define-fun ref!8811 () (_ BitVec 64) (bvadd ref!8758 (bvmul ref!8758 (_ bv4 64)))) ; LEA operation - 0x7f10b260af70: lea rdx, [r15 + r15*4]
(define-fun ref!8813 () (_ BitVec 64) (bvadd (_ bv18446744073709551568 64) (bvadd ref!8798 (bvmul ref!8811 (_ bv2 64))))) ; LEA operation - 0x7f10b260af77: lea r15, [rax + rdx*2 - 0x30]
(define-fun ref!8833 () (_ BitVec 32) ((_ zero_extend 24) ref!18)) ; Extended part - MOVZX operation - 0x7f10b260ad7a: movzx eax, byte ptr [rax]
(define-fun ref!8836 () (_ BitVec 32) (bvsub ref!8833 (_ bv35 32))) ; CMP operation - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!8842 () (_ BitVec 1) (ite (= ref!8836 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!8848 () (_ BitVec 32) (bvand ref!8833 ref!8833)) ; TEST operation - 0x7f10b260af81: test eax, eax
(define-fun ref!8852 () (_ BitVec 1) ((_ extract 31 31) ref!8848)) ; Sign flag - 0x7f10b260af81: test eax, eax
(define-fun ref!8856 () (_ BitVec 64) ((_ sign_extend 32) ref!8833)) ; CDQE operation - 0x7f10b260af88: cdqe
(define-fun ref!8869 () (_ BitVec 64) (bvadd ref!8813 (bvmul ref!8813 (_ bv4 64)))) ; LEA operation - 0x7f10b260af70: lea rdx, [r15 + r15*4]
(define-fun ref!8871 () (_ BitVec 64) (bvadd (_ bv18446744073709551568 64) (bvadd ref!8856 (bvmul ref!8869 (_ bv2 64))))) ; LEA operation - 0x7f10b260af77: lea r15, [rax + rdx*2 - 0x30]
(define-fun ref!8927 () (_ BitVec 64) ref!8871) ; MOV operation - 0x7f10b260af98: mov rax, r15
(define-fun ref!8929 () (_ BitVec 64) (bvneg ref!8927)) ; NEG operation - 0x7f10b260af9b: neg rax
(define-fun ref!8945 () (_ BitVec 64) (ite (= (_ bv0 1) (_ bv1 1)) ref!8929 ref!8871)) ; CMOVE operation - 0x7f10b260afa2: cmove r15, rax
(define-fun ref!8998 () (_ BitVec 32) ((_ zero_extend 24) ref!20)) ; Extended part - MOVZX operation - 0x7f10b260ad7a: movzx eax, byte ptr [rax]
(define-fun ref!9001 () (_ BitVec 32) (bvsub ref!8998 (_ bv35 32))) ; CMP operation - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!9007 () (_ BitVec 1) (ite (= ref!9001 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!9010 () (_ BitVec 32) (bvsub ref!8998 (_ bv4294967295 32))) ; CMP operation - 0x7f10b260af2f: cmp eax, -1
(define-fun ref!9016 () (_ BitVec 1) (ite (= ref!9010 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260af2f: cmp eax, -1
(define-fun ref!9031 () (_ BitVec 64) ((_ sign_extend 32) ref!8998)) ; MOVSXD operation - 0x7f10b260af18: movsxd rax, ebx
(define-fun ref!9037 () (_ BitVec 32) (bvsub ref!8998 (_ bv45 32))) ; CMP operation - 0x7f10b260af50: cmp ebx, 0x2d
(define-fun ref!9043 () (_ BitVec 1) (ite (= ref!9037 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260af50: cmp ebx, 0x2d
(define-fun ref!9046 () (_ BitVec 32) (bvsub ref!8998 (_ bv43 32))) ; CMP operation - 0x7f10b260af55: cmp ebx, 0x2b
(define-fun ref!9052 () (_ BitVec 1) (ite (= ref!9046 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260af55: cmp ebx, 0x2b
(define-fun ref!9063 () (_ BitVec 64) (bvadd (_ bv18446744073709551568 64) ref!9031)) ; LEA operation - 0x7f10b260af77: lea r15, [rax + rdx*2 - 0x30]
(define-fun ref!9080 () (_ BitVec 32) ((_ zero_extend 24) ref!21)) ; Extended part - MOVZX operation - 0x7f10b260ad7a: movzx eax, byte ptr [rax]
(define-fun ref!9083 () (_ BitVec 32) (bvsub ref!9080 (_ bv35 32))) ; CMP operation - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!9089 () (_ BitVec 1) (ite (= ref!9083 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!9095 () (_ BitVec 32) (bvand ref!9080 ref!9080)) ; TEST operation - 0x7f10b260af81: test eax, eax
(define-fun ref!9099 () (_ BitVec 1) ((_ extract 31 31) ref!9095)) ; Sign flag - 0x7f10b260af81: test eax, eax
(define-fun ref!9103 () (_ BitVec 64) ((_ sign_extend 32) ref!9080)) ; CDQE operation - 0x7f10b260af88: cdqe
(define-fun ref!9116 () (_ BitVec 64) (bvadd ref!9063 (bvmul ref!9063 (_ bv4 64)))) ; LEA operation - 0x7f10b260af70: lea rdx, [r15 + r15*4]
(define-fun ref!9118 () (_ BitVec 64) (bvadd (_ bv18446744073709551568 64) (bvadd ref!9103 (bvmul ref!9116 (_ bv2 64))))) ; LEA operation - 0x7f10b260af77: lea r15, [rax + rdx*2 - 0x30]
(define-fun ref!9138 () (_ BitVec 32) ((_ zero_extend 24) ref!22)) ; Extended part - MOVZX operation - 0x7f10b260ad7a: movzx eax, byte ptr [rax]
(define-fun ref!9141 () (_ BitVec 32) (bvsub ref!9138 (_ bv35 32))) ; CMP operation - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!9147 () (_ BitVec 1) (ite (= ref!9141 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b260ad7d: cmp eax, 0x23
(define-fun ref!9153 () (_ BitVec 32) (bvand ref!9138 ref!9138)) ; TEST operation - 0x7f10b260af81: test eax, eax
(define-fun ref!9157 () (_ BitVec 1) ((_ extract 31 31) ref!9153)) ; Sign flag - 0x7f10b260af81: test eax, eax
(define-fun ref!9161 () (_ BitVec 64) ((_ sign_extend 32) ref!9138)) ; CDQE operation - 0x7f10b260af88: cdqe
(define-fun ref!9174 () (_ BitVec 64) (bvadd ref!9118 (bvmul ref!9118 (_ bv4 64)))) ; LEA operation - 0x7f10b260af70: lea rdx, [r15 + r15*4]
(define-fun ref!9176 () (_ BitVec 64) (bvadd (_ bv18446744073709551568 64) (bvadd ref!9161 (bvmul ref!9174 (_ bv2 64))))) ; LEA operation - 0x7f10b260af77: lea r15, [rax + rdx*2 - 0x30]
(define-fun ref!9232 () (_ BitVec 64) ref!9176) ; MOV operation - 0x7f10b260af98: mov rax, r15
(define-fun ref!9234 () (_ BitVec 64) (bvneg ref!9232)) ; NEG operation - 0x7f10b260af9b: neg rax
(define-fun ref!9250 () (_ BitVec 64) (ite (= (_ bv0 1) (_ bv1 1)) ref!9234 ref!9176)) ; CMOVE operation - 0x7f10b260afa2: cmove r15, rax
(define-fun ref!9279 () (_ BitVec 64) ref!8945) ; MOV operation - 0x7f10b260b0f9: mov rax, qword ptr [rsp + 0x80]
(define-fun ref!9297 () (_ BitVec 64) ref!9250) ; MOV operation - 0x7f10b260b10a: mov rax, qword ptr [rsp + 0x88]
(define-fun ref!9751 () (_ BitVec 32) ((_ extract 31 0) ref!9279)) ; Extended part - MOVSXD operation - 0x7f10b260b16b: movsxd rax, dword ptr [rsp + 0x48]
(define-fun ref!9752 () (_ BitVec 64) ((_ sign_extend 32) ref!9751)) ; MOVSXD operation - 0x7f10b260b16b: movsxd rax, dword ptr [rsp + 0x48]
(define-fun ref!9757 () (_ BitVec 32) ((_ extract 31 0) ref!9297)) ; Extended part - MOVSXD operation - 0x7f10b260b173: movsxd r14, dword ptr [rsp + 0x40]
(define-fun ref!9758 () (_ BitVec 64) ((_ sign_extend 32) ref!9757)) ; MOVSXD operation - 0x7f10b260b173: movsxd r14, dword ptr [rsp + 0x40]
(define-fun ref!9790 () (_ BitVec 64) ref!9752) ; MOV operation - 0x7f10b260b1a3: mov rbp, rax
(define-fun ref!9794 () (_ BitVec 8) ((_ extract 63 56) ref!9790)) ; Byte reference - MOV operation - 0x7f10b260b1df: mov qword ptr [r12 - 0x18], rbp
(define-fun ref!9795 () (_ BitVec 8) ((_ extract 55 48) ref!9790)) ; Byte reference - MOV operation - 0x7f10b260b1df: mov qword ptr [r12 - 0x18], rbp
(define-fun ref!9796 () (_ BitVec 8) ((_ extract 47 40) ref!9790)) ; Byte reference - MOV operation - 0x7f10b260b1df: mov qword ptr [r12 - 0x18], rbp
(define-fun ref!9797 () (_ BitVec 8) ((_ extract 39 32) ref!9790)) ; Byte reference - MOV operation - 0x7f10b260b1df: mov qword ptr [r12 - 0x18], rbp
(define-fun ref!9798 () (_ BitVec 8) ((_ extract 31 24) ref!9279)) ; Byte reference - MOV operation - 0x7f10b260b1df: mov qword ptr [r12 - 0x18], rbp
(define-fun ref!9799 () (_ BitVec 8) ((_ extract 23 16) ref!9279)) ; Byte reference - MOV operation - 0x7f10b260b1df: mov qword ptr [r12 - 0x18], rbp
(define-fun ref!9800 () (_ BitVec 8) ((_ extract 15 8) ref!9279)) ; Byte reference - MOV operation - 0x7f10b260b1df: mov qword ptr [r12 - 0x18], rbp
(define-fun ref!9801 () (_ BitVec 8) ((_ extract 7 0) ref!9279)) ; Byte reference - MOV operation - 0x7f10b260b1df: mov qword ptr [r12 - 0x18], rbp
(define-fun ref!9804 () (_ BitVec 8) ((_ extract 63 56) ref!9758)) ; Byte reference - MOV operation - 0x7f10b260b1e4: mov qword ptr [r12 - 0x10], r14
(define-fun ref!9805 () (_ BitVec 8) ((_ extract 55 48) ref!9758)) ; Byte reference - MOV operation - 0x7f10b260b1e4: mov qword ptr [r12 - 0x10], r14
(define-fun ref!9806 () (_ BitVec 8) ((_ extract 47 40) ref!9758)) ; Byte reference - MOV operation - 0x7f10b260b1e4: mov qword ptr [r12 - 0x10], r14
(define-fun ref!9807 () (_ BitVec 8) ((_ extract 39 32) ref!9758)) ; Byte reference - MOV operation - 0x7f10b260b1e4: mov qword ptr [r12 - 0x10], r14
(define-fun ref!9808 () (_ BitVec 8) ((_ extract 31 24) ref!9297)) ; Byte reference - MOV operation - 0x7f10b260b1e4: mov qword ptr [r12 - 0x10], r14
(define-fun ref!9809 () (_ BitVec 8) ((_ extract 23 16) ref!9297)) ; Byte reference - MOV operation - 0x7f10b260b1e4: mov qword ptr [r12 - 0x10], r14
(define-fun ref!9810 () (_ BitVec 8) ((_ extract 15 8) ref!9297)) ; Byte reference - MOV operation - 0x7f10b260b1e4: mov qword ptr [r12 - 0x10], r14
(define-fun ref!9811 () (_ BitVec 8) ((_ extract 7 0) ref!9297)) ; Byte reference - MOV operation - 0x7f10b260b1e4: mov qword ptr [r12 - 0x10], r14
(define-fun ref!10002 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!9794 ref!9795) ref!9796) ref!9797) ref!9798) ref!9799) ref!9800) ref!9801)) ; MOV operation - 0x7f10b25ed728: mov rdx, qword ptr [rbp + 0x20]
(define-fun ref!10004 () (_ BitVec 64) (bvmul ref!10002 (concat (concat (concat (concat (concat (concat (concat ref!9804 ref!9805) ref!9806) ref!9807) ref!9808) ref!9809) ref!9810) ref!9811))) ; IMUL operation - 0x7f10b25ed72f: imul rdx, qword ptr [rbp + 0x28]
(define-fun ref!10017 () (_ BitVec 64) (bvmul ref!10004 (_ bv15 64))) ; IMUL operation - 0x7f10b25ed73a: imul rdx, rcx
(define-fun ref!10021 () (_ BitVec 64) (bvadd (_ bv7 64) ref!10017)) ; LEA operation - 0x7f10b25ed73e: lea rcx, [rdx + 7]
(define-fun ref!10023 () (_ BitVec 64) (bvand ref!10017 ref!10017)) ; TEST operation - 0x7f10b25ed742: test rdx, rdx
(define-fun ref!10027 () (_ BitVec 1) ((_ extract 63 63) ref!10023)) ; Sign flag - 0x7f10b25ed742: test rdx, rdx
(define-fun ref!10030 () (_ BitVec 64) (ite (= ref!10027 (_ bv1 1)) ref!10021 ref!10017)) ; CMOVS operation - 0x7f10b25ed745: cmovs rdx, rcx
(define-fun ref!10040 () (_ BitVec 64) (bvashr ref!10030 (bvand ((_ zero_extend 56) (_ bv3 8)) (_ bv63 64)))) ; SAR operation - 0x7f10b25ed74d: sar rdx, 3
(define-fun ref!10047 () (_ BitVec 64) ref!10040) ; ADD operation - 0x7f10b25ed751: add rsi, rdx
(define-fun ref!10071 () (_ BitVec 64) (bvsub ref!10047 (_ bv16777215 64))) ; CMP operation - 0x7f10b25ed75c: cmp rsi, 0xffffff
(define-fun ref!10073 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor ref!10047 (bvxor (_ bv16777215 64) ref!10071)) (bvand (bvxor ref!10047 ref!10071) (bvxor ref!10047 (_ bv16777215 64)))))) ; Carry flag - 0x7f10b25ed75c: cmp rsi, 0xffffff
(define-fun ref!10077 () (_ BitVec 1) (ite (= ref!10071 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b25ed75c: cmp rsi, 0xffffff
(define-fun ref!10097 () (_ BitVec 8) (ite (= (bvor ref!10073 ref!10077) (_ bv1 1)) (_ bv1 8) (_ bv0 8))) ; Byte reference - PUSH operation - 0x7f10b25ed795: push r14
(define-fun ref!10123 () (_ BitVec 8) ref!9794) ; Byte reference - MOV operation - 0x7f10b25ed05f: mov qword ptr [rsp + 8], r8
(define-fun ref!10124 () (_ BitVec 8) ref!9795) ; Byte reference - MOV operation - 0x7f10b25ed05f: mov qword ptr [rsp + 8], r8
(define-fun ref!10125 () (_ BitVec 8) ref!9796) ; Byte reference - MOV operation - 0x7f10b25ed05f: mov qword ptr [rsp + 8], r8
(define-fun ref!10126 () (_ BitVec 8) ref!9797) ; Byte reference - MOV operation - 0x7f10b25ed05f: mov qword ptr [rsp + 8], r8
(define-fun ref!10127 () (_ BitVec 8) ref!9798) ; Byte reference - MOV operation - 0x7f10b25ed05f: mov qword ptr [rsp + 8], r8
(define-fun ref!10128 () (_ BitVec 8) ref!9799) ; Byte reference - MOV operation - 0x7f10b25ed05f: mov qword ptr [rsp + 8], r8
(define-fun ref!10129 () (_ BitVec 8) ref!9800) ; Byte reference - MOV operation - 0x7f10b25ed05f: mov qword ptr [rsp + 8], r8
(define-fun ref!10130 () (_ BitVec 8) ref!9801) ; Byte reference - MOV operation - 0x7f10b25ed05f: mov qword ptr [rsp + 8], r8
(define-fun ref!10133 () (_ BitVec 8) ref!9804) ; Byte reference - MOV operation - 0x7f10b25ed064: mov qword ptr [rsp], r9
(define-fun ref!10134 () (_ BitVec 8) ref!9805) ; Byte reference - MOV operation - 0x7f10b25ed064: mov qword ptr [rsp], r9
(define-fun ref!10135 () (_ BitVec 8) ref!9806) ; Byte reference - MOV operation - 0x7f10b25ed064: mov qword ptr [rsp], r9
(define-fun ref!10136 () (_ BitVec 8) ref!9807) ; Byte reference - MOV operation - 0x7f10b25ed064: mov qword ptr [rsp], r9
(define-fun ref!10137 () (_ BitVec 8) ref!9808) ; Byte reference - MOV operation - 0x7f10b25ed064: mov qword ptr [rsp], r9
(define-fun ref!10138 () (_ BitVec 8) ref!9809) ; Byte reference - MOV operation - 0x7f10b25ed064: mov qword ptr [rsp], r9
(define-fun ref!10139 () (_ BitVec 8) ref!9810) ; Byte reference - MOV operation - 0x7f10b25ed064: mov qword ptr [rsp], r9
(define-fun ref!10140 () (_ BitVec 8) ref!9811) ; Byte reference - MOV operation - 0x7f10b25ed064: mov qword ptr [rsp], r9
(define-fun ref!10143 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!10123 ref!10124) ref!10125) ref!10126) ref!10127) ref!10128) ref!10129) ref!10130)) ; MOV operation - 0x7f10b25ed07e: mov r8, qword ptr [rsp + 8]
(define-fun ref!10145 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat ref!10133 ref!10134) ref!10135) ref!10136) ref!10137) ref!10138) ref!10139) ref!10140)) ; MOV operation - 0x7f10b25ed083: mov r9, qword ptr [rsp]
(define-fun ref!10167 () (_ BitVec 64) (bvmul ref!10143 ref!10145)) ; IMUL operation - 0x7f10b25ed0ae: imul r8, r9
(define-fun ref!10178 () (_ BitVec 64) ref!10167) ; IMUL operation - 0x7f10b25ed0d4: imul rbp, r8
(define-fun ref!10182 () (_ BitVec 64) (concat (concat (concat (concat (concat (concat (concat (_ bv0 8) (_ bv0 8)) (_ bv0 8)) (_ bv0 8)) (_ bv0 8)) (_ bv0 8)) (_ bv0 8)) ref!10097)) ; CMP operation - 0x7f10b25ed0d8: cmp qword ptr [rsp + 0x60], 0
(define-fun ref!10188 () (_ BitVec 1) (ite (= ref!10182 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b25ed0d8: cmp qword ptr [rsp + 0x60], 0
(define-fun ref!10191 () (_ BitVec 32) ((_ extract 31 0) ref!10178)) ; Extended part - MOV operation - 0x7f10b25ed170: mov esi, ebp
(define-fun ref!10217 () (_ BitVec 32) (bvand ref!10191 ref!10191)) ; TEST operation - 0x7f10b25f333c: test r12d, r12d
(define-fun ref!10221 () (_ BitVec 1) ((_ extract 31 31) ref!10217)) ; Sign flag - 0x7f10b25f333c: test r12d, r12d
(define-fun ref!10222 () (_ BitVec 1) (ite (= ref!10217 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b25f333c: test r12d, r12d
(define-fun ref!10241 () (_ BitVec 64) ref!10178) ; POP operation - 0x7f10b25f337a: pop rbp
(define-fun ref!10247 () (_ BitVec 64) (bvadd (_ bv18446744073709551615 64) ref!10241)) ; LEA operation - 0x7f10b25ed0f6: lea rsi, [rbp - 1]
(define-fun ref!10260 () (_ BitVec 64) ref!10247) ; MOV operation - 0x7f10b25f31ec: mov rbp, rsi
(define-fun ref!10262 () (_ BitVec 64) ref!10260) ; MOV operation - 0x7f10b25f31f9: mov rsi, rbp
(define-fun ref!10264 () (_ BitVec 64) ref!10262) ; MOV operation - 0x7f10b25f2278: mov rax, rsi
(define-fun ref!10266 () (_ BitVec 64) (bvand ref!10264 ref!10264)) ; TEST operation - 0x7f10b25f2267: test rax, rax
(define-fun ref!10270 () (_ BitVec 1) ((_ extract 63 63) ref!10266)) ; Sign flag - 0x7f10b25f2267: test rax, rax
(define-fun ref!10284 () (_ BitVec 64) (bvand ref!10264 ref!10264)) ; TEST operation - 0x7f10b25f321d: test rax, rax
(define-fun ref!10288 () (_ BitVec 1) ((_ extract 63 63) ref!10284)) ; Sign flag - 0x7f10b25f321d: test rax, rax
(define-fun ref!10291 () (_ BitVec 64) (ite (= ref!10288 (_ bv1 1)) (_ bv18446744073709551615 64) ref!10264)) ; CMOVS operation - 0x7f10b25f3220: cmovs rax, rdx
(define-fun ref!10304 () (_ BitVec 64) (bvand ref!10291 ref!10291)) ; TEST operation - 0x7f10b25ed104: test rax, rax
(define-fun ref!10308 () (_ BitVec 1) ((_ extract 63 63) ref!10304)) ; Sign flag - 0x7f10b25ed104: test rax, rax
(define-fun ref!10369 () (_ BitVec 32) ((_ extract 31 0) ref!10178)) ; Extended part - MOVSXD operation - 0x7f10b25f23ea: movsxd rbx, dword ptr [r12 + 8]
(define-fun ref!10370 () (_ BitVec 64) ((_ sign_extend 32) ref!10369)) ; MOVSXD operation - 0x7f10b25f23ea: movsxd rbx, dword ptr [r12 + 8]
(define-fun ref!10372 () (_ BitVec 64) ref!10264) ; MOV operation - 0x7f10b25f23ef: mov rdi, qword ptr [rdi + 0x18]
(define-fun ref!10374 () (_ BitVec 64) (bvadd (_ bv1 64) ref!10372)) ; ADD operation - 0x7f10b25f23f3: add rax, rdi
(define-fun ref!10382 () (_ BitVec 64) (bvsub ref!10370 ref!10374)) ; CMP operation - 0x7f10b25f23f6: cmp rbx, rax
(define-fun ref!10385 () (_ BitVec 1) ((_ extract 63 63) (bvand (bvxor ref!10370 ref!10374) (bvxor ref!10370 ref!10382)))) ; Overflow flag - 0x7f10b25f23f6: cmp rbx, rax
(define-fun ref!10387 () (_ BitVec 1) ((_ extract 63 63) ref!10382)) ; Sign flag - 0x7f10b25f23f6: cmp rbx, rax
(define-fun ref!10390 () (_ BitVec 64) ref!10370) ; MOV operation - 0x7f10b25f23f9: mov rbp, rbx
(define-fun ref!10395 () (_ BitVec 64) (bvneg ref!10372)) ; CMP operation - 0x7f10b25f2452: cmp rax, rdi
(define-fun ref!10398 () (_ BitVec 1) ((_ extract 63 63) (bvand ref!10372 ref!10395))) ; Overflow flag - 0x7f10b25f2452: cmp rax, rdi
(define-fun ref!10400 () (_ BitVec 1) ((_ extract 63 63) ref!10395)) ; Sign flag - 0x7f10b25f2452: cmp rax, rdi
(define-fun ref!10404 () (_ BitVec 64) (bvsub ref!10390 ref!10372)) ; CMP operation - 0x7f10b25f2457: cmp rbp, rdi
(define-fun ref!10407 () (_ BitVec 1) ((_ extract 63 63) (bvand (bvxor ref!10390 ref!10372) (bvxor ref!10390 ref!10404)))) ; Overflow flag - 0x7f10b25f2457: cmp rbp, rdi
(define-fun ref!10409 () (_ BitVec 1) ((_ extract 63 63) ref!10404)) ; Sign flag - 0x7f10b25f2457: cmp rbp, rdi
(define-fun ref!10410 () (_ BitVec 1) (ite (= ref!10404 (_ bv0 64)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b25f2457: cmp rbp, rdi
(define-fun ref!10412 () (_ BitVec 64) (ite (= (bvor (bvxor ref!10409 ref!10407) ref!10410) (_ bv0 1)) ref!10372 ref!10390)) ; CMOVG operation - 0x7f10b25f245a: cmovg rbp, rdi
(define-fun ref!10414 () (_ BitVec 32) ((_ extract 31 0) ref!10412)) ; Extended part - SUB operation - 0x7f10b25f245e: sub ebp, eax
(define-fun ref!10423 () (_ BitVec 32) (bvand ref!10414 ref!10414)) ; TEST operation - 0x7f10b25f2460: test ebp, ebp
(define-fun ref!10427 () (_ BitVec 1) ((_ extract 31 31) ref!10423)) ; Sign flag - 0x7f10b25f2460: test ebp, ebp
(define-fun ref!10428 () (_ BitVec 1) (ite (= ref!10423 (_ bv0 32)) (_ bv1 1) (_ bv0 1))) ; Zero flag - 0x7f10b25f2460: test ebp, ebp
(define-fun ref!10439 () (_ BitVec 64) ((_ sign_extend 32) ref!10414)) ; MOVSXD operation - 0x7f10b25f2474: movsxd rbp, ebp
(define-fun ref!10441 () (_ BitVec 64) ref!10439) ; MOV operation - 0x7f10b25f2479: mov rdx, rbp
(define-fun ref!10447 () (_ BitVec 64) (bvsub ref!10441 (_ bv16 64))) ; CMP operation - 0x7f10b5440a44: cmp rdx, 0x10
(define-fun ref!10449 () (_ BitVec 1) ((_ extract 63 63) (bvxor (bvxor ref!10441 (bvxor (_ bv16 64) ref!10447)) (bvand (bvxor ref!10441 ref!10447) (bvxor ref!10441 (_ bv16 64)))))) ; Carry flag - 0x7f10b5440a44: cmp rdx, 0x10
(assert (= ref!8699 (_ bv0 1)))
(assert (= ref!8711 (_ bv0 1)))
(assert (not (= ref!8738 (_ bv1 1))))
(assert (not (= ref!8747 (_ bv1 1))))
(assert (= ref!8784 (_ bv0 1)))
(assert (not (= ref!8794 (_ bv1 1))))
(assert (= ref!8842 (_ bv0 1)))
(assert (not (= ref!8852 (_ bv1 1))))
(assert (= ref!9007 (_ bv0 1)))
(assert (= ref!9016 (_ bv0 1)))
(assert (not (= ref!9043 (_ bv1 1))))
(assert (not (= ref!9052 (_ bv1 1))))
(assert (= ref!9089 (_ bv0 1)))
(assert (not (= ref!9099 (_ bv1 1))))
(assert (= ref!9147 (_ bv0 1)))
(assert (not (= ref!9157 (_ bv1 1))))
(assert (= ref!10188 (_ bv0 1)))
(assert (not (= (bvor ref!10221 ref!10222) (_ bv1 1))))
(assert (not (= ref!10270 (_ bv1 1))))
(assert (not (= ref!10308 (_ bv1 1))))
(assert (= ref!10387 ref!10385))
(assert (not (= ref!10400 ref!10398)))
(assert (= (bvor ref!10427 ref!10428) (_ bv0 1)))
(assert (= ref!10449 (_ bv1 1)))
(minimize file_file.pgm_16 )
(check-sat)
(get-objectives)
(exit)
